@page "/TwoPlayersGame"
@rendermode InteractiveServer

@using HOT.Assessment.RockPaperScissor.Core.Domain.Hand
@using HOT.Assessment.RockPaperScissor.Core.UseCases
@inject IPaperRockScissorUseCase PaperRockScissorUseCase;

<PageTitle>Two Player Game</PageTitle>

<div class="center">
    <h1>Rock Paper Scissor</h1>
    <div>
        <div class="container">
            <div class="player">
                <div class="score">Player 1: @_playerScore1</div>
                <div class="action"><i class="@_handIcon1"></i></div>
            </div>
            <div class="player">
                <div class="score">Player 2: @_playerScore2</div>
                <div class="action"><i class="@_handIcon2"></i></div>
            </div>
        </div>
                @if (!_isGameEnded)
                {
                    <div class="container">

                        <div class="player">
                            @foreach (HandAction hand in Enum.GetValues(typeof(HandAction)))
                            {
                                <button disabled="@_isGameEnded" class="round_button" @onclick="() => Hand1ActionChanged(hand)"><Hand HandAction="hand"/></button>
                            }
                        </div>
                        <div class="player">
                            @foreach (HandAction hand in Enum.GetValues(typeof(HandAction)))
                            {
                                <button disabled="@_isGameEnded" class="round_button" @onclick="() => Hand2ActionChanged(hand)"><Hand HandAction="hand"/></button>
                            }
                        </div>
                    </div>
                }
        <h2>@_gameResult</h2>
        @if (!_isGameEnded)
        {
            <div>
                <button @onclick="VerifyWinner">Play</button>    
            </div>
        }
        @if (_isGameEnded)
        {
            <div>
                <button @onclick="NewGame">New Game</button>
                <h2>@_gameOverMessage</h2>
            </div>
        }
    </div>
</div>

@code
{
    private string? _handIcon1 = string.Empty;
    private string? _handIcon2 = string.Empty;
    private HandAction _hand1Action;
    private HandAction _hand2Action;
    private uint _playerScore1;
    private uint _playerScore2;
    private string? _gameResult = string.Empty;
    private bool _isGameEnded = true;
    private string _gameOverMessage = String.Empty;


    private void VerifyWinner()
    {
        
        GetGameResults(_hand1Action, _hand2Action);

        GetWinner();
    }

    private void GetWinner()
    {
        _isGameEnded = CheckButtonState();
        if (!_isGameEnded) return;
        var playerNumber = (_playerScore1 > 2) ? 1 : 2;
        _gameOverMessage = $"Player {playerNumber} Win";

    }

    private void Hand1ActionChanged(HandAction hand)
    {
        _hand1Action = hand;
        UpdatePlayer1Hand(hand);
    }
    
    private void Hand2ActionChanged(HandAction hand)
    {
        _hand2Action = hand;
        UpdatePlayer2Hand(hand);
    }

    private void NewGame()
    {
        var response = PaperRockScissorUseCase.NewGame();
        UpdatePlayersState(response);
        _isGameEnded = CheckButtonState();
        _gameOverMessage = String.Empty;
    }

    private bool CheckButtonState()
    {
        return _playerScore1 > 2 || _playerScore2 > 2;
    }

    private void GetGameResults(HandAction hand1Action, HandAction hand2Action)
    {
        var request = new TwoPlayerRequest(hand1Action, hand2Action);
        var response = PaperRockScissorUseCase.Play(request);
        UpdatePlayersState(response);
    }

    private void UpdatePlayersState(TwoPlayerResponse response)
    {
        _gameResult = response.MessageResult;
        _playerScore1 = response.Player1Score.ValueScore;
        _playerScore2 = response.Player2Score.ValueScore;
    }

    private void UpdatePlayer1Hand(HandAction hand1Action)
    {
        _handIcon1 = HandViewHelper.GetActionClass(hand1Action);
    }

    private void UpdatePlayer2Hand(HandAction hand2Action)
    {
        _handIcon2 = HandViewHelper.GetActionClass(hand2Action);
    }
}
